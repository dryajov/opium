{"version":3,"sources":["scripts/resolvers/property-resolver.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;wBAIqB,YAAY;;;;IAEZ,YAAY;YAAZ,YAAY;;;;;;;;;AAQpB,WARQ,YAAY,CAQnB,QAAQ,EAAwB;QAAtB,QAAQ,yDAAG,SAAS;;0BARvB,YAAY;;AAS7B,+BATiB,YAAY,6CASvB,QAAQ,EAAE;;AAEhB,QAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;GAC1B;;;;;;;;;eAZkB,YAAY;;WAoBxB,iBAAC,GAAG,EAAE;AACX,UAAI,EAAE,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAA,AAAC,EAAE;AAC3B,eAAO,CAAC,IAAI,gDAA8C,IAAI,CAAC,QAAQ,cAAW,CAAC;AACnF,eAAO;OACR;;AAED,aAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC3B;;;SA3BkB,YAAY;;;qBAAZ,YAAY","file":"property-resolver.js","sourcesContent":["/**\n * Created by dmitriy.ryajov on 7/17/15.\n */\n\nimport Resolver from './resolver';\n\nexport default class PropResolver extends Resolver {\n\n  /**\n   * Construct property resolver\n   *\n   * @param injector - Injector instance to be used\n   * @param propName - Property name\n   */\n  constructor(injector, propName = '$inject') {\n    super(injector);\n\n    this.propName = propName;\n  }\n\n  /**\n   * Resolve dependency names\n   *\n   * @param obj - Object to resolve property for\n   * @returns {*}\n   */\n  resolve(obj) {\n    if (!(this.propName in obj)) {\n      console.info(`Undefined object or no injector property \"${this.propName}\" found!`);\n      return;\n    }\n\n    return obj[this.propName];\n  }\n}\n"]}