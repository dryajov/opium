{"version":3,"sources":["scripts/injectors/argument-injector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;wBAIqB,aAAa;;;;;;;;;;IAOb,gBAAgB;YAAhB,gBAAgB;;WAAhB,gBAAgB;0BAAhB,gBAAgB;;+BAAhB,gBAAgB;;;eAAhB,gBAAgB;;;;;;;;;WAQ3B,gBAAC,GAAG,EAAE;AACR,UAAI,OAAO,8BATE,gBAAgB,wCASF,GAAG,CAAC,CAAC;AAChC,UAAI,IAAI,GAAG,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC;eAAK,CAAC,CAAC,QAAQ;OAAA,CAAC,GAAG,IAAI,CAAC;;AAE3D,UAAI,GAAG,CAAC,IAAI,EAAE;AACV,YAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC;OAC5C;;;AAGD,aAAO,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KACvC;;;SAlBgB,gBAAgB;;;qBAAhB,gBAAgB","file":"scripts/injectors/argument-injector.js","sourcesContent":["/**\n * Created by dmitriy.ryajov on 6/27/15.\n */\n\nimport Injector from '../injector';\n\n/**\n * This class will perform argument injection by calling\n * apply on the registered dependency. It expects dependency to be\n * a function.\n */\nexport default class ArgumentInjector extends Injector {\n\n    /**\n     * Inject de dependency by calling dependency.apply(dependency, arguments)\n     *\n     * @param dep\n     * @returns {*}\n     */\n    inject(dep) {\n        let allDeps = super.inject(dep);\n        let args = allDeps ? allDeps.map((d) => d.injected) : null;\n\n        if (dep.args) {\n            args = args.concat(dep.args) || dep.args;\n        }\n\n        // inject as parameters\n        return dep.dep.apply(dep.dep, args);\n    }\n}\n"],"sourceRoot":"/source/"}