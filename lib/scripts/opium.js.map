{"version":3,"sources":["scripts/opium.js"],"names":[],"mappings":";;;;;;;;;;;;;;QAEO,gBAAgB;;0BAEA,cAAc;;;;wBACd,YAAY;;;;yBAM5B,aAAa;;sBAQb,UAAU;;yBAEsB,aAAa;;IAE9C,KAAK;AACE,WADP,KAAK,GAC4C;QAAzC,IAAI,yDAAG,SAAS;QAAE,SAAS;;0BADnC,KAAK;;AAEP,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;AAC1B,QAAI,CAAC,SAAS,GAAG,SAAS,CAAC;GAC5B;;eALG,KAAK;;;;;;;;;WAqBH,gBAAC,IAAI,EAAE;AACX,aAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAChC;;;;;;;;;;;;;WAWW,sBAAC,IAAI,EAAE,IAAI,EAA8C;UAA5C,IAAI,yDAAG,IAAI;UAAE,SAAS,yDAAG,IAAI;UAAE,IAAI,yDAAG,IAAI;;AACjE,UAAI,CAAC,QAAQ,CAAC,IAAI,EAChB,IAAI,EACJ,IAAI,EACJ,oCAAyB,EACzB,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACvC;;;;;;;;;;;;;WAWc,yBAAC,IAAI,EAAE,OAAO,EAA8C;UAA5C,IAAI,yDAAG,IAAI;UAAE,SAAS,yDAAG,IAAI;UAAE,IAAI,yDAAG,IAAI;;AACvE,UAAI,CAAC,QAAQ,CAAC,IAAI,EAChB,OAAO,EACP,IAAI,EACJ,iCAAsB,EACtB,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACvC;;;;;;;;;;;;WAUe,0BAAC,IAAI,EAAE,QAAQ,EAAiC;UAA/B,IAAI,yDAAG,IAAI;UAAE,SAAS,yDAAG,IAAI;;AAC5D,UAAI,CAAC,QAAQ,CAAC,IAAI,EAChB,QAAQ,EACR,IAAI,EACJ,iCAAsB,EACtB,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;KACvC;;;;;;;;;;;;;;;;WAcO,kBAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE;AACnD,UAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,4BAAe,IAAI,EACzC,GAAG,EACH,IAAI,EACJ,IAAI,CAAC,QAAQ,EACb,QAAQ,EACR,SAAS,EACT,IAAI,CAAC,CAAC,CAAC;KACV;;;;;;;;;;WAQS,oBAAC,IAAI,EAAE;AACf,UAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAClC,UAAI,GAAG,EAAE;AACP,YAAI,CAAC,QAAQ,UAAO,CAAC,IAAI,CAAC,CAAC;OAC5B;;AAED,aAAO,GAAG,CAAC;KACZ;;;;;;;WAKK,kBAAG;;;;;;AACP,6BAAgB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,8HAAE;cAA/B,GAAG;;AACV,aAAG,CAAC,MAAM,EAAE,CAAC;SACd;;;;;;;;;;;;;;;KACF;;;SAhHmB,eAAG;AACrB,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;SAEmB,aAAC,GAAG,EAAE;AACxB,UAAI,CAAC,SAAS,GAAG,GAAG,CAAC;KACtB;;;SAbG,KAAK;;;QA2HT,SAAS;QACT,SAAS;QACT,IAAI;QACJ,OAAO;QACP,QAAQ;QACR,YAAY;QACZ,QAAQ;QACR,UAAU;QACV,gBAAgB;QAChB,mBAAmB;QACnB,gBAAgB;QAChB,QAAQ;QACR,KAAK,GAAL,KAAK","file":"opium.js","sourcesContent":["/*jshint unused:false*/\n\nimport 'babel-polyfill';\n\nimport Dependency from './dependency';\nimport Injector   from './injector';\n\nimport {\n  PropertyInjector,\n  ConstructorInjector,\n  ArgumentInjector\n} from './injectors';\n\nimport {\n  SINGLETON,\n  PROTOTYPE,\n  TYPE,\n  FACTORY,\n  INSTANCE,\n} from './consts';\n\nimport {PropResolver, Resolver}   from './resolvers';\n\nclass Opium {\n  constructor(name = 'default', lifeCycle = SINGLETON) {\n    this.name = name;\n    this.registry = new Map();\n    this.lifeCycle = lifeCycle;\n  }\n\n  get defaultLifecycle() {\n    return this.lifeCycle;\n  }\n\n  set defaultLifecycle(val) {\n    this.lifeCycle = val;\n  }\n\n  /**\n   * Ge dependency by name\n   *\n   * @param name\n   * @returns {*}\n   */\n  getDep(name) {\n    return this.registry.get(name);\n  }\n\n  /**\n   * Register a type. By default, type dependencies use constructor injection.\n   *\n   * @param name - Name to register this dependency with\n   * @param type - The type that this dependency is going to be registered with\n   * @param deps - An array of dependencies to be resolved before this dependency is created\n   * @param lifecycle - Lifecycle of this dependency\n   * @param args - An array of addition arguments to be passed as is to the constructor of the type\n   */\n  registerType(name, type, deps = null, lifecycle = null, args = null) {\n    this.register(name,\n      type,\n      deps,\n      new ConstructorInjector(),\n      lifecycle || this.defaultLifecycle);\n  }\n\n  /**\n   * Register a factory. By default, factory dependencies use argument injection.\n   *\n   * @param name - Name to register this dependency with\n   * @param factory - The factory that will be used to create the dependency\n   * @param deps - An array of dependencies to be resolved before this factory is called\n   * @param lifecycle - Lifecycle of this dependency\n   * @param args - An array of addition arguments to be passed as is to the factory function\n   */\n  registerFactory(name, factory, deps = null, lifecycle = null, args = null) {\n    this.register(name,\n      factory,\n      deps,\n      new ArgumentInjector(),\n      lifecycle || this.defaultLifecycle);\n  }\n\n  /**\n   * Register an instance (a concrete object). By default, instance dependencies use property/setter injection.\n   *\n   * @param name - Name to register this dependency with\n   * @param instance - The instance to register\n   * @param deps - An array of dependencies to be resolved before this factory is called\n   * @param lifecycle - Lifecycle of this dependency\n   */\n  registerInstance(name, instance, deps = null, lifecycle = null) {\n    this.register(name,\n      instance,\n      deps,\n      new PropertyInjector(),\n      lifecycle || this.defaultLifecycle);\n  }\n\n  /**\n   * Register a dependency. This is called by registerType, registerFactory and registerInstance underneath to register\n   * dependencies.\n   *\n   * @param name - Name of the dependency\n   * @param dep - The dependency. Can be a type, factory or instance.\n   * @param deps - An array of dependencies to be resolved before this dependency is injected.\n   * @param injector - The injector to be used in order to perform the injection of the dependencies.\n   * @param lifecycle - The lifecycle for this dependency {SINGLETON, PROTOTYPE}\n   * @param args - An array of addition arguments to be passed as is to the dependency.\n   *                NOTE: Only applies to constructor or argument injectors\n   */\n  register(name, dep, deps, injector, lifecycle, args) {\n    this.registry.set(name, new Dependency(name,\n      dep,\n      deps,\n      this.registry,\n      injector,\n      lifecycle,\n      args));\n  }\n\n  /**\n   * Remove dependency from the registry\n   *\n   * @param name\n   * @returns {*}\n   */\n  unRegister(name) {\n    let dep = this.registry.get(name);\n    if (dep) {\n      this.registry.delete(name);\n    }\n\n    return dep;\n  }\n\n  /**\n   * Inject all dependencies\n   */\n  inject() {\n    for (let dep of this.registry.values()) {\n      dep.inject(); // inject all dependencies\n    }\n  }\n}\n\nexport {\n  SINGLETON,\n  PROTOTYPE,\n  TYPE,\n  FACTORY,\n  INSTANCE,\n  PropResolver,\n  Resolver,\n  Dependency,\n  PropertyInjector,\n  ConstructorInjector,\n  ArgumentInjector,\n  Injector,\n  Opium\n};\n"]}