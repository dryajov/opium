{"version":3,"sources":["scripts/opium.js"],"names":[],"mappings":";;;;;;;;;;;;;;QAEO,gBAAgB;;0BAEA,cAAc;;;;yCACR,+BAA+B;;;;4CAC5B,kCAAkC;;;;yCACrC,+BAA+B;;;;sBACzB,UAAU;;IAExB,KAAK;AACX,aADM,KAAK,GAC+B;YAAzC,IAAI,yDAAG,SAAS;YAAE,SAAS;;8BADtB,KAAK;;AAElB,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;AAC1B,YAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;;iBALgB,KAAK;;;;;;;;;eAqBhB,gBAAC,IAAI,EAAE;AACT,mBAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAClC;;;;;;;;;;;;;eAWW,sBAAC,IAAI,EAAE,IAAI,EAA8C;gBAA5C,IAAI,yDAAG,IAAI;gBAAE,SAAS,yDAAG,IAAI;gBAAE,IAAI,yDAAG,IAAI;;AAC/D,gBAAI,CAAC,QAAQ,CAAC,IAAI,EACd,IAAI,EACJ,IAAI,EACJ,+CAAyB,EACzB,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3C;;;;;;;;;;;;;eAWc,yBAAC,IAAI,EAAE,OAAO,EAA8C;gBAA5C,IAAI,yDAAG,IAAI;gBAAE,SAAS,yDAAG,IAAI;gBAAE,IAAI,yDAAG,IAAI;;AACrE,gBAAI,CAAC,QAAQ,CAAC,IAAI,EACd,OAAO,EACP,IAAI,EACJ,4CAAsB,EACtB,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3C;;;;;;;;;;;;eAUe,0BAAC,IAAI,EAAE,QAAQ,EAAiC;gBAA/B,IAAI,yDAAG,IAAI;gBAAE,SAAS,yDAAG,IAAI;;AAC1D,gBAAI,CAAC,QAAQ,CAAC,IAAI,EACd,QAAQ,EACR,IAAI,EACJ,4CAAsB,EACtB,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3C;;;;;;;;;;;;;;;;eAcO,kBAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE;AACjD,gBAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,4BAAe,IAAI,EACvC,GAAG,EACH,IAAI,EACJ,IAAI,CAAC,QAAQ,EACb,QAAQ,EACR,SAAS,EACT,IAAI,CAAC,CAAC,CAAC;SACd;;;;;;;;;;eAQS,oBAAC,IAAI,EAAE;AACb,gBAAI,GAAG,YAAA,CAAC;AACR,gBAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AAC/B,oBAAI,CAAC,QAAQ,UAAO,CAAC,IAAI,CAAC,CAAC;aAC9B;;AAED,mBAAO,GAAG,CAAC;SACd;;;;;;;eAKK,kBAAG;;;;;;AACL,qCAAgB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,8HAAE;wBAA/B,GAAG;;AACR,uBAAG,CAAC,MAAM,EAAE,CAAC;iBAChB;;;;;;;;;;;;;;;SACJ;;;aAhHmB,eAAG;AACnB,mBAAO,IAAI,CAAC,SAAS,CAAC;SACzB;aAEmB,aAAC,GAAG,EAAE;AACtB,gBAAI,CAAC,SAAS,GAAG,GAAG,CAAC;SACxB;;;WAbgB,KAAK;;;qBAAL,KAAK","file":"scripts/opium.js","sourcesContent":["/*jshint unused:false*/\n\nimport 'babel/polyfill';\n\nimport Dependency from './dependency';\nimport PropertyInjector from './injectors/property-injector';\nimport ConstructorInjector from './injectors/constructor-injector';\nimport ArgumentInjector from './injectors/argument-injector';\nimport {SINGLETON, PROTOTYPE} from './consts';\n\nexport default class Opium {\n    constructor(name = 'default', lifeCycle = SINGLETON) {\n        this.name = name;\n        this.registry = new Map();\n        this.lifeCycle = lifeCycle;\n    }\n\n    get defaultLifecycle() {\n        return this.lifeCycle;\n    }\n\n    set defaultLifecycle(val) {\n        this.lifeCycle = val;\n    }\n\n    /**\n     * Ge dependency by name\n     *\n     * @param name\n     * @returns {*}\n     */\n    getDep(name) {\n        return this.registry.get(name);\n    }\n\n    /**\n     * Register a type. By default, type dependencies use constructor injection.\n     *\n     * @param name - Name to register this dependency with\n     * @param type - The type that this dependency is going to be registered with\n     * @param deps - An array of dependencies to be resolved before this dependency is created\n     * @param lifecycle - Lifecycle of this dependency\n     * @param args - An array of addition arguments to be passed as is to the constructor of the type\n     */\n    registerType(name, type, deps = null, lifecycle = null, args = null) {\n        this.register(name,\n            type,\n            deps,\n            new ConstructorInjector(),\n            lifecycle || this.defaultLifecycle);\n    }\n\n    /**\n     * Register a factory. By default, factory dependencies use argument injection.\n     *\n     * @param name - Name to register this dependency with\n     * @param factory - The factory that will be used to create the dependency\n     * @param deps - An array of dependencies to be resolved before this factory is called\n     * @param lifecycle - Lifecycle of this dependency\n     * @param args - An array of addition arguments to be passed as is to the factory function\n     */\n    registerFactory(name, factory, deps = null, lifecycle = null, args = null) {\n        this.register(name,\n            factory,\n            deps,\n            new ArgumentInjector(),\n            lifecycle || this.defaultLifecycle);\n    }\n\n    /**\n     * Register an instance (a concrete object). By default, instance dependencies use property/setter injection.\n     *\n     * @param name - Name to register this dependency with\n     * @param instance - The instance to register\n     * @param deps - An array of dependencies to be resolved before this factory is called\n     * @param lifecycle - Lifecycle of this dependency\n     */\n    registerInstance(name, instance, deps = null, lifecycle = null) {\n        this.register(name,\n            instance,\n            deps,\n            new PropertyInjector(),\n            lifecycle || this.defaultLifecycle);\n    }\n\n    /**\n     * Register a dependency. This is called by registerType, registerFactory and registerInstance underneath to register\n     * dependencies.\n     *\n     * @param name - Name of the dependency\n     * @param dep - The dependency. Can be a type, factory or instance.\n     * @param deps - An array of dependencies to be resolved before this dependency is injected.\n     * @param injector - The injector to be used in order to perform the injection of the dependencies.\n     * @param lifecycle - The lifecycle for this dependency {SINGLETON, PROTOTYPE}\n     * @param args - An array of addition arguments to be passed as is to the dependency.\n     *                NOTE: Only applies to constructor or argument injectors\n     */\n    register(name, dep, deps, injector, lifecycle, args) {\n        this.registry.set(name, new Dependency(name,\n            dep,\n            deps,\n            this.registry,\n            injector,\n            lifecycle,\n            args));\n    }\n\n    /**\n     * Remove dependency from the registry\n     *\n     * @param name\n     * @returns {*}\n     */\n    unRegister(name) {\n        let dep;\n        if (dep = this.registry.get(name)) {\n            this.registry.delete(name);\n        }\n\n        return dep;\n    }\n\n    /**\n     * Inject all dependencies\n     */\n    inject() {\n        for (let dep of this.registry.values()) {\n            dep.inject(); // inject all dependencies\n        }\n    }\n}\n"],"sourceRoot":"/source/"}