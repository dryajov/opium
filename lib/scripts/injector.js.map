{"version":3,"sources":["scripts/injector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;IAQqB,QAAQ;WAAR,QAAQ;0BAAR,QAAQ;;;eAAR,QAAQ;;;;;;;;;;;;WAUrB,gBAAC,GAAG,EAAE;AACV,UAAI,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;AAC5B,UAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;AACvB,eAAO;OACR;;AAED,aAAO,CAAC,OAAO,CAAC,UAAC,MAAM;eAAK,MAAM,CAAC,MAAM,EAAE;OAAA,CAAC,CAAC;AAC7C,aAAO,OAAO,CAAC;KAChB;;;SAlBkB,QAAQ;;;qBAAR,QAAQ","file":"injector.js","sourcesContent":["/**\n * Created by dmitriy.ryajov on 6/27/15.\n */\n\n/**\n * This class serves as a base class for all injector types.\n * Extend it to create a new injector type.\n */\nexport default class Injector {\n  /**\n   * Inject a dependency. This method will call inject on all\n   * dependencies that it resolves from dep. This method is cascading,\n   * calling it, will cause the dependency graph for you dependency to be\n   * resolved.\n   *\n   * @param dep - the dependency to be injected\n   * @returns {*}\n   */\n  inject(dep) {\n    var allDeps = dep.resolve();\n    if (allDeps.length <= 0) {\n      return;\n    }\n\n    allDeps.forEach((depDep) => depDep.inject());\n    return allDeps;\n  }\n}\n"]}