{"version":3,"sources":["scripts/resolvers/property-resolver.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;wBAIqB,YAAY;;;;IAEZ,YAAY;cAAZ,YAAY;;;;;;;;;AAQlB,aARM,YAAY,CAQjB,QAAQ,EAAwB;YAAtB,QAAQ,yDAAG,SAAS;;8BARzB,YAAY;;AASzB,mCATa,YAAY,6CASnB,QAAQ,EAAE;;AAEhB,YAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC5B;;;;;;;;;iBAZgB,YAAY;;eAoBtB,iBAAC,GAAG,EAAE;AACT,gBAAI,EAAE,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAA,AAAC,EAAE;AACzB,uBAAO,CAAC,IAAI,gDAA8C,IAAI,CAAC,QAAQ,cAAW,CAAC;AACnF,uBAAO;aACV;;AAED,mBAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC7B;;;WA3BgB,YAAY;;;qBAAZ,YAAY","file":"scripts/resolvers/property-resolver.js","sourcesContent":["/**\n * Created by dmitriy.ryajov on 7/17/15.\n */\n\nimport Resolver from './resolver';\n\nexport default class PropResolver extends Resolver {\n\n    /**\n     * Construct property resolver\n     *\n     * @param injector - Injector instance to be used\n     * @param propName - Property name\n     */\n    constructor(injector, propName = '$inject') {\n        super(injector);\n\n        this.propName = propName;\n    }\n\n    /**\n     * Resolve dependency names\n     *\n     * @param obj - Object to resolve property for\n     * @returns {*}\n     */\n    resolve(obj) {\n        if (!(this.propName in obj)) {\n            console.info(`Undefined object or no injector property \"${this.propName}\" found!`);\n            return;\n        }\n\n        return obj[this.propName];\n    }\n}\n"],"sourceRoot":"/source/"}